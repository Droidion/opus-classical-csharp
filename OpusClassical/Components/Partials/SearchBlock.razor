@using Microsoft.IdentityModel.Tokens
@using OpusClassical.Models
@using OpusClassical.Repositories
@using OpusClassical.Services
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject ComposerSearchRepository ComposerSearchRepo
@inject ComposerSearchService ComposerSearchService

<div
    class="search-button label cursor-pointer duration-150 hover:scale-125"
    role="button"
    aria-label="Search Icon"
    tabindex="0"
    @onclick="ShowSearch">
    <svg
        class="icon h-4 w-4 xl:h-5 xl:w-5"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg">
        <title id="searchIconTitle">Search</title>
        <path
            d="m23.809 21.646-6.205-6.205c1.167-1.605 1.857-3.579 1.857-5.711 0-5.365-4.365-9.73-9.731-9.73-5.365 0-9.73 4.365-9.73 9.73 0 5.366 4.365 9.73 9.73 9.73 2.034 0 3.923-.627 5.487-1.698l6.238 6.238zm-20.955-11.916c0-3.792 3.085-6.877 6.877-6.877s6.877 3.085 6.877 6.877-3.085 6.877-6.877 6.877c-3.793 0-6.877-3.085-6.877-6.877z"/>
    </svg>
</div>

@if (_searchVisible)
{
    <div
        role="link"
        tabindex="0"
        class="fixed inset-0 bg-black/35 backdrop-blur-sm"
        @onclick="HideSearch">
    </div>
    <div
        class="bg-white dark:bg-mineshaft absolute left-[calc(50%-10rem)] top-32 w-80 rounded text-lg shadow-md"
        id="search-bar">
        <input
            class="m-1.5 h-8 w-[calc(100%-0.8rem)] appearance-none rounded-sm border-0 bg-black/10 px-1.5 py-4 text-black placeholder:font-light focus:outline-none dark:text-white/80"
            type="search"
            placeholder="Search composers by last name"
            role="searchbox"
            name="search"
            id="search-input"
            @ref="_searchInput"
            @oninput="SearchComposersByString"/>
        @if (!_searchResults.IsNullOrEmpty())
        {
            <ul id="search-results-list">
                @foreach (var composer in _searchResults)
                {
                    <li
                        class="flex mx-1.5 my-1 rounded-sm px-2 py-0.5 hover:bg-black/10">
                        <a
                            class="flex-grow hover:no-underline"
                            @onclick="() => ClickLink(composer.Slug)">
                            @composer.LastName, @composer.FirstName
                        </a>
                    </li>
                }
            </ul>
        }
    </div>
}

@code {
    private bool _searchVisible = false;
    private IEnumerable<ComposerSearchResult> _searchResults = [];
    private ElementReference? _searchInput;


    private async Task ShowSearch()
    {
        await ComposerSearchService.RefreshCache();
        _searchResults = [];
        _searchVisible = true;
    }

    private void HideSearch()
    {
        _searchResults = [];
        _searchVisible = false;
    }

    private void ClickLink(string slug)
    {
        HideSearch();
        Navigation.NavigateTo("/composer/" + slug);
    }

    private void SearchComposersByString(ChangeEventArgs e)
    {
        if (e.Value is null) return;
        var value = e.Value.ToString();
        if (!value.IsNullOrEmpty())
        {
            _searchResults = ComposerSearchService.GetSearch(value);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _searchInput?.FocusAsync();
    }

}