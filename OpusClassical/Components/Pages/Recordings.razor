@inject NavigationManager Navigation
@inject WorkRepository WorkRepo
@inject ComposerRepository ComposerRepo
@inject RecordingRepository RecordingRepo
@inject PerformerRepository PerformerRepo
@inject LinkRepository LinkRepo
@inject EnvironmentConfig Env
@inject IJSRuntime JS
@rendermode InteractiveServer

@page "/composer/{ComposerSlug}/work/{WorkId}"
@using OpusClassical.Helpers
@using OpusClassical.Models
@using OpusClassical.Repositories

<div>
    <h1>
        <span>@WorkName</span>
    </h1>
    <div class="mb-4 w-full text-center">
        <a href="/composer/@_composer?.Slug">
            @_composer?.FirstName&nbsp;@_composer?.LastName
        </a>
        @if (!string.IsNullOrEmpty(WorkYears))
        {
            <span>, @WorkYears</span>
        }
    </div>
    <h2>Recommended Recordings</h2>
    <hr/>
    <div class="full-width mb-4 flex flex-wrap">
        @foreach (var recording in RecordingsWithPerformersAndLinks)
        {
            <RecordingCard Links="recording.Links" Performers="recording.Performers" Recording="recording.Recording" ImagesUrl="@ImagesUrl"/>
        }
    </div>
</div>

@code {

    record RecordingWithPerformersAndLinks(Recording Recording, IEnumerable<Performer> Performers, IEnumerable<Link> Links);

    [Parameter] public required string ComposerSlug { get; set; }
    [Parameter] public required string WorkId { get; set; }

    private Work? _work;
    private Composer? _composer;
    private IEnumerable<Recording> _recordings = [];
    private IEnumerable<Performer> _performers = [];
    private IEnumerable<Link> _links = [];

    private string WorkName => HelperFunctions.FormatWorkName(_work?.Title, _work?.No, _work?.Nickname);
    private string WorkYears => HelperFunctions.FormatYearsRangeString(_work?.YearStart, _work?.YearFinish);
    private string ImagesUrl => Env.ImagesUrl;

    private IEnumerable<RecordingWithPerformersAndLinks> RecordingsWithPerformersAndLinks => _recordings.Select(r =>
        new RecordingWithPerformersAndLinks(r, _performers.Where(p => p.RecordingId == r.Id), _links.Where(l => l.RecordingId == r.Id))
    );

    private async Task LoadData()
    {
        try
        {
            _work = await WorkRepo.GetWorkById(Convert.ToInt32(WorkId));
            _composer = await ComposerRepo.GetComposerBySlug(ComposerSlug);
            if (_work is null || _composer is null) return;
            _recordings = await RecordingRepo.GetRecordingsByWork(_work.Id);
            var recordingsIds = _recordings.Select(r => r.Id).ToArray();
            _performers = await PerformerRepo.GetPerformersByRecordings(recordingsIds);
            _links = await LinkRepo.GetLinksByRecordings(recordingsIds);
        }
        catch (Exception ex)
        {
            Navigation.NavigateTo("/error");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(ComposerSlug)) return;
        await LoadData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("loadTheme");
    }

}