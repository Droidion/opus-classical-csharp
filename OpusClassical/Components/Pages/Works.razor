@page "/composer/{Slug}"
@using OpusClassical.Models
@using OpusClassical.Repositories
@inject NavigationManager Navigation
@inject WorkRepository WorkRepo
@inject ComposerRepository ComposerRepo
@rendermode InteractiveServer

<div>
    @if (_composer is not null)
    {
        <ComposerDetails Composer="_composer"/>
    }
    @foreach (var genre in GenresWithWorks)
    {
        <h2>@genre.GenreName</h2>
        <hr/>
        <div class="mb-4 flex flex-wrap">
            @foreach (var work in genre.Works)
            {
                <WorkCard ComposerSlug="@_composer?.Slug" Work="work"/>
            }
        </div>
    }
</div>

@code {

    private record GenreWithWorks(string GenreName, IEnumerable<Work> Works);

    [Parameter] public required string Slug { get; set; }

    private IEnumerable<Work> _works = [];
    private Composer? _composer;

    private IEnumerable<GenreWithWorks> GenresWithWorks => _works
        .GroupBy(w => new { w.GenreId, w.GenreName })
        .Select(g => new GenreWithWorks(g.Key.GenreName, g.ToList()))
        .ToList();

    private async Task LoadData()
    {
        try
        {
            _composer = await ComposerRepo.GetComposerBySlug(Slug);
            if (_composer is null) return;
            _works = await WorkRepo.GetWorksByComposerId(_composer.Id);
        }
        catch (Exception ex)
        {
            Navigation.NavigateTo("/error");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(Slug)) return;
        await LoadData();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrWhiteSpace(Slug)) return;
        await LoadData();
    }

}